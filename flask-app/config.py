import os
import json
import sys
from dotenv import load_dotenv

# Load variables from .env file in the current directory (flask-app)
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path=dotenv_path)
else:
    print("Warning: .env file not found.")

# Path to the compiled contract JSON relative to this config file
COMPILED_CONTRACT_PATH = os.path.join(os.path.dirname(__file__), "compiled_contract.json")

def load_abi_from_compiled_json():
    """Loads ABI from the JSON generated by compile_contract.py"""
    try:
        if not os.path.exists(COMPILED_CONTRACT_PATH):
             print(f"Error: Compiled contract file not found at {COMPILED_CONTRACT_PATH}")
             print("Please run compile_contract.py first.")
             return None # Return None if file doesn't exist
        with open(COMPILED_CONTRACT_PATH, 'r') as f:
            data = json.load(f)
            abi = data.get('abi')
            if not abi:
                 print(f"Error: 'abi' key not found or is empty in {COMPILED_CONTRACT_PATH}")
                 return None
            return abi
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {COMPILED_CONTRACT_PATH}")
        return None
    except Exception as e:
        print(f"Error loading ABI from {COMPILED_CONTRACT_PATH}: {e}")
        return None

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY')
    if not SECRET_KEY:
        print("Warning: SECRET_KEY not set in .env. Using default (unsafe).")
        SECRET_KEY = 'default-unsafe-secret-key-please-change'

    # Blockchain config
    BLOCKCHAIN_NODE_URI = os.environ.get('BLOCKCHAIN_NODE_URI')
    if not BLOCKCHAIN_NODE_URI:
        print("Warning: BLOCKCHAIN_NODE_URI not set in .env. Using Ganache default.")
        BLOCKCHAIN_NODE_URI = 'http://127.0.0.1:7545' # Default to potential Ganache CLI / Hardhat port

    CONTRACT_ADDRESS = os.environ.get('CONTRACT_ADDRESS')
    if not CONTRACT_ADDRESS:
        print("Warning: CONTRACT_ADDRESS not set in .env. Application may fail.")
        # You might want to exit here if address is absolutely required at startup
        # sys.exit("Error: CONTRACT_ADDRESS is required. Please deploy and update .env")

    CONTRACT_ABI = load_abi_from_compiled_json()
    if not CONTRACT_ABI:
         print("FATAL: Contract ABI could not be loaded. Exiting.")
         sys.exit("Error: Failed to load Contract ABI.")

    # Server account private key (might be needed for some admin actions, if any)
    # For the demo 'no-metamask' login, user keys are handled temporarily in session
    SERVER_ACCOUNT_PRIVATE_KEY = os.environ.get('SERVER_ACCOUNT_PRIVATE_KEY') # Example if needed

    # --- ADD PINATA CONFIG ---
    PINATA_API_KEY = os.environ.get('PINATA_API_KEY')
    PINATA_SECRET_API_KEY = os.environ.get('PINATA_SECRET_API_KEY')
    
    # Determine which gateway URL to use
    IPFS_GATEWAY_URL = os.environ.get('PINATA_GATEWAY_URL') or os.environ.get('IPFS_GATEWAY_URL') or "https://gateway.pinata.cloud/ipfs/" # Default to Pinata generic

    # --- Check required Pinata keys ---
    if not PINATA_API_KEY or not PINATA_SECRET_API_KEY:
         print("Warning: PINATA_API_KEY or PINATA_SECRET_API_KEY not set in .env. File uploads via Pinata will fail.")

    SERVER_ACCOUNT_PRIVATE_KEY = os.environ.get('DEPLOYER_PRIVATE_KEY')

# Perform checks after class definition
if not Config.CONTRACT_ADDRESS:
     print("Reminder: CONTRACT_ADDRESS is not set in .env. Deploy the contract and update the .env file.")
     # Allow app to continue starting, but blockchain interactions will fail until address is set